<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">
       <!-- 
       参考：spring配置datasource三种方式 http://blog.csdn.net/yangyz_love/article/details/8199207
       org.springframework.jdbc.datasource.DriverManagerDataSource  
       		只要有连接就新建一个connection,根本没有连接池的作用
       	org.apache.commons.dbcp.BasicDataSource 真正使用了连接池技术 	
        -->
	<!-- 内存式数据库和数据源dataSource -->
	<jdbc:embedded-database id="dataSource">
		<jdbc:script location="classpath:database/jpetstore-hsqldb-schema.sql" />
		<jdbc:script location="classpath:database/jpetstore-hsqldb-dataload.sql" />
	</jdbc:embedded-database>
	<!-- 数据源:无连接池 -->
	 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
              <property name="driverClassName"  value="${db.driverClassName}" /> 
              <property name="url" value="${jdbc.url}" /> 
              <property name="username"  value="${db.username}" /> 
              <property name="password" value="${db.password}" /> 
       </bean> 
       <!-- 集成druid 
	webxml
		<servlet>
			<servlet-name>DruidStatView</servlet-name>
			<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
		</servlet>
		<servlet-mapping>
			<servlet-name>DruidStatView</servlet-name>
			<url-pattern>/druid/*</url-pattern>
		</servlet-mapping>
	-->
	<bean id="dataSourceDruid" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" >
		<property name="name" value="app1"/><!-- 多数据源时，监控时进行区分 -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driverClassName}" /><!-- 可不配,根据url自动识别 -->
		<property name="filters" value="${filters}" />
		<property name="maxActive" value="${maxActive}" /><!-- 最大连接池数量 -->
		<property name="minIdle" value="${minIdle}" /><!-- 最小连接池数量 -->
		<property name="initialSize" value="${initialSize}" /><!-- 初始化时建立物理连接的个数 -->
		<property name="maxWait" value="${maxWait}" /><!-- 获取连接时最大等待时间(毫秒),开启后启用公平锁并发效率下降、-->
<!-- 		<property name="useUnfairLock">true</property>使用非公平锁 -->
		<!-- ①Destroy线程检测连接的间隔时间②testWhileIdle的判断依据 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- Destroy线程如果检测到当前连接的最后活跃时间和当前时间差值大于xx,则关闭当前连接 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" /><!-- 建议true -->
		<property name="testOnBorrow" value="${testOnBorrow}" /><!-- 申请连接时检测连接是否有效:建议false -->
		<property name="testOnReturn" value="${testOnReturn}" /><!-- 归还连接时检测连接是否有效：建议false -->
		<!-- -默认-1，要启用PSCache必须大于0 -->
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<!-- 指定连接建立多长时间就需要被强制关闭 -->
	    	<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
	    	<property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志(线程堆栈) -->
	</bean>
	<!-- 集成DBCP -->
		<bean id="dataSourceDbcp" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="maxActive" value="${maxActive}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxWait" value="${maxWait}" />
		<property name="defaultAutoCommit" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${removeAbandoned}" /> 
	   	 <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
	    	<property name="logAbandoned" value="${logAbandoned}" />
	</bean>
	<!-- 动态数据源 -->
	<!-- 阿里数据库连接池 -->
</beans>